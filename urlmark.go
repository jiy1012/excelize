// Copyright 2016 - 2022 The excelize Authors. All rights reserved. Use of
// this source code is governed by a BSD-style license that can be found in
// the LICENSE file.
//
// Package excelize providing a set of functions that allow you to write to
// and read from XLSX / XLSM / XLTM files. Supports reading and writing
// spreadsheet documents generated by Microsoft Excelâ„¢ 2007 and later. Supports
// complex components by high compatibility, and provided streaming API for
// generating or reading data from a worksheet with huge amounts of data. This
// library needs Go version 1.15 or later.

package excelize

import (
	"io/ioutil"
	"path"
	"path/filepath"
	"strconv"
)

func (f *File) AddUrlMark(sheet, cell, url string) error {
	// Read sheet data.
	ws, err := f.workSheetReader(sheet)
	if err != nil {
		return err
	}
	ws.Lock()
	// Add first picture for given sheet, create xl/drawings/ and xl/drawings/_rels/ folder.
	drawingID := f.countDrawings() + 1
	drawingXML := "xl/drawings/drawing" + strconv.Itoa(drawingID) + ".xml"
	drawingID, drawingXML = f.prepareDrawing(ws, drawingID, sheet, drawingXML)
	drawingRels := "xl/drawings/_rels/drawing" + strconv.Itoa(drawingID) + ".xml.rels"

	file, _ := ioutil.ReadFile(filepath.Clean(FileMark))
	ext := path.Ext(FileMark)
	f.addMedia(file, ext)
	drawingRID := f.addRels(drawingRels, SourceRelationshipImage, url, TargetMode)
	ws.Unlock()
	if cell != "" {
		cell = CellMark
	}
	err = f.addDrawingLinkPicture(sheet, drawingXML, cell, FileMark, 1, 1, drawingRID, 0, &formatPicture{})
	if err != nil {
		return err
	}
	f.addContentTypePart(drawingID, "drawings")
	f.addSheetNameSpace(sheet, SourceRelationship)
	return err
}
